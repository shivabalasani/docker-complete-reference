------------------------------------------ Section 2 --------------------------------------------------------------------
Docker Commands :-
docker version
docker run hello-world

docker run busybox echo hi there
docker run busybox ls
docker run hello-world ls (error)

List all running containers: docker ps
docker run busybox ping google.com
List all containers that we have ever created : docker ps --all 

docker run = docker create + docker start

Create a Container : docker create <image name>
Start a Container : docker start <container id>

docker create hello-world (will generate id of the container that is created)
docker start -a 9271d.....21e (-a will watch for output from the container and prints it out on my terminal)

Restarting Stopped Containers : docker start -a 37a8c45a23e1
Removing Stopped Containers : docker system prune

Retrieving Log Outputs : dock logs <container id>
Stopping Containers : docker stop <container id> ( Terminate signal (SIGTERM) sent to running process and waits 10 seconds)
					  docker kill <container id> ( Kill signal (SIGKILL) sent to running process to terminate immediately)
					  

Multi-Command Containers : docker run redis						   
						   redis-server / redis-cli
						   
Executing Commands in Running Containers : docker exec -it <container id> <command>
										   docker exec -it 37a8c45a23e1 redis-cli
										   set myvalue 5 / get myvalue
										   
The purpose of the IT Flag : docker exec -it 37a8c45a23e1 redis-cli
							 docker exec -i -t 37a8c45a23e1 redis-cli (-i ensures any stuff that I type gets directed to STDIN of the running process.-t makes all the text show up a little bit pretty)
							 Every process in linux environment has STDIN/STDOUT/STDERR
							 docker exec -i 37a8c45a23e1 redis-cli

Getting a command prompt in a container : docker exec -it 37a8c45a23e1 sh ( Outputs #. Now can run any unix commands like cd /, ls. Ctrl + D or exit to exit)
										  In MacOS it is bash
										  In windows it is gitbash or powershell
										  In Unix zsh(Z shell)   
										  sh (shell)
										  
Starting with a shell : docker exec -it 37a8c45a23e1 sh
						docker run -it busybox sh ( Outputs #)
						
Container Isolation : docker run -it busybox sh (touch hithere to creates a new file. Multiple instances of the shell won't have the hithere file. Two running containers will have seperate file systems and data won't be shared)
										  
								
--------------------------------------------------------- Section 3 --------------------------------------------------------------------
Dockerfile - Configuration to define how our container should behave. Dockerfile -> Docker Client -> Docker Server -> Usable Image!
Creating a Dockerfile - Specify a base image -> Run some commands to install additional programs -> Specify a command to run on container startup.

Building a Dockerfile : Create an image that runs redis-server
						mkdir redis-image
						cd redis-image
												  (#User an existing docker image as a base / Download and install a dependency /  Tell the image what to do when it starts as a container)	
						code .  Create Dockerfile (FROM alpine 								/RUN apk add --update redis 		/ CMD ["redis-server"])
						docker build .
						docker run fc60771eaa08
						
Writing a dockerfile  == Being given a computer with no OS and being told to install Chrome.

Tagging an Image : docker build -t yourdockerid/RepoorProjectname:version .
				   docker build -t sbalasani/redis:latest .
				   docker run sbalasani/redis
				   
Manual Image generation with Docker Commit : docker run -it alpine sh
											 # apk add --update redis (Modifying file system)
							In new terminal: docker ps (get the id of the running container above)
											 docker commit -c 'CMD ["redis-server"]' fc60771eaa08
											 docker run 083589332af ( runs the image created above)


--------------------------------------------------------- Section 4 --------------------------------------------------------------------

Go to simpleweb
Build an image : docker build .

COPY 	./ 			./  ->(Place to copy stuff to inside *the container*)
		 |
		 \/
(Path to folder to copy from on *your machine* relative to build context)


Build an image with tag : docker build -t sbalasani/simpleweb .

Start the image : docker run sbalasani/simpleweb 
http://localhost:8080 (Error)

Docker run with Port Mapping : docker run -p 8080 : 8080 <image id>
					(Route incoming request to this port on local host to  : this port inside the container)
							   docker run -p 8080 : 8080 sbalasani/simpleweb

http://localhost:8080

Running shell inside the container : docker run -it sbalasani/simpleweb sh
		 					or 	   : docker exec -it eeed31ee65c6 sh (Should go to /usr/app #)
ls
exit

------------------------------------ Section 5 :  Docker Compose with Multiple Local Containers--------------------------------------------

Go to visits
Build an image : docker build .
Build an image with tag : docker build -t sbalasani/visits:latest .
Start the image : docker run sbalasani/visits 

Running Redis on a seperate container : docker run redis
Start the image : docker run sbalasani/visits 

Options for connecting Node App Container with Redis Container
1) Use Docker CLI's Networking Features
2) Use Docker Compose

Docker Compose 
	1) Seperate CLI that get installed along with Docker.
	2) Used to start up multiple Docker containers at the same time.
	3) Automates some of the long-winded arguments we were passing to 'docker run'

Docker Compose commands : docker-compose up   		(same as docker run myimage)
						  docker-compose up --build (same as  docker build . and docker run myimage)	

Stopping Docker Compose Containers : docker run -d redis	  (Lanunch single container)
									 docker stop ba1220ea9edc (Stop single container)

									 docker-compose up -d (Launch all containers in backgroud)
									 docker-compose stop  (Stop all containers)

Container Maintenance with Compose  
Automatic Container Restarts :  restart: always (add this to the container you want to restart in docker-compose.yml)

	Status Codes :  0 - We exited and everthing is OK
				  1,2,3 etc - We exited because something went wrong!
	
	Restart Policies : "no" - Never attempt to restart this. container if it stops or crashes. Need to be in quotes in yml file
						always - If this container stops *for any reason* always attempt to restart it.
						on-failure - Only restart if the container stops with and error code.
						unless-stoppped - Always restart unless we forcibly stop it.

Container Status with Docker Compose : docker-compose ps (Prints out the statuses of the containers that are running)
localhost:4001

------------------------------------ Section 5 :  Docker Compose with Multiple Local Containers--------------------------------------------